% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_shp_download.R
\name{make_shp_download}
\alias{make_shp_download}
\title{Make a zipfile of shapefile parts to be downloaded.}
\usage{
make_shp_download(
  data,
  layer_names,
  zip_name = if (!multiple) layer_names,
  multiple = FALSE
)
}
\arguments{
\item{data}{Data to be downloaded, usually a reactive. If multiple = TRUE, must be a list.}

\item{layer_names}{Name of the shapefile/s, ie will output layer_name.shp, layer_name.dbf, etc. If multiple = TRUE,
should be same length as data list - one name for each shapefile.}

\item{zip_name}{Name of the .zip folder downloaded. MUST match the name provided to the filename argument of
shiny::download_handler.}

\item{multiple}{Download contains multiple shapefiles? Check requirements for data and layer_names if TRUE.}
}
\value{
A temp path to the .zip file ready to be downloaded.
}
\description{
Create the components of one or more shapefiles, and zip them to a single file that is ready for
\code{shiny::downloadHandler}. Assign to an object (e.g. `zipfile`) within the function in the \code{content}
argument of downloadHandler, then use \code{file.copy(zipfile, file)} (see example).
}
\details{
Replaces \code{envShiny::download_shp} (see [envShiny #2](https://github.com/dew-landscapes/envShiny/issues/2)).
}
\examples{
\dontrun{
output$download <- downloadHandler(
filename = function() {
  paste0("download_", input$taxa, ".zip")
},
content = function(file) {
  zipfile <- make_shp_download(data = data(),
                               layer_names = paste0("data_", input$taxa),
                               zip_name = paste0("download_", input$taxa),
                               multiple = FALSE)
  file.copy(zipfile, file)
}
)
}
}
